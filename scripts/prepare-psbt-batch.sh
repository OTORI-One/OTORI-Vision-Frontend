#!/bin/bash

# Script to prepare a batch of PSBTs for customer testing
# This script generates PSBTs that allow test customers to acquire OVT tokens

# Configuration
LP_ADDRESS="${LP_ADDRESS:-<LP_WALLET_ADDRESS_HERE>}"  # Replace with actual LP address
OVT_RUNE_ID="${OVT_RUNE_ID:-OTORI}"  # Replace with actual rune ID
OUTPUT_DIR="./psbt-transactions"
NUM_TRANSACTIONS=100  # Number of PSBTs to generate
MIN_AMOUNT=500  # Minimum amount of OVT per transaction
MAX_AMOUNT=5000  # Maximum amount of OVT per transaction
FEE_RATE=1  # sat/vB
BITCOIN_AMOUNT=0.0000546  # Minimum bitcoin amount for each output (546 sats)
DRY_RUN=true  # Set to false to execute transactions

# Ensure bitcoin-cli is available
command -v bitcoin-cli >/dev/null 2>&1 || { echo "bitcoin-cli not found, please install Bitcoin Core"; exit 1; }

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --no-dry-run)
            DRY_RUN=false
            shift
            ;;
        --count=*)
            NUM_TRANSACTIONS="${1#*=}"
            shift
            ;;
        --min=*)
            MIN_AMOUNT="${1#*=}"
            shift
            ;;
        --max=*)
            MAX_AMOUNT="${1#*=}"
            shift
            ;;
        --lp=*)
            LP_ADDRESS="${1#*=}"
            shift
            ;;
        --rune=*)
            OVT_RUNE_ID="${1#*=}"
            shift
            ;;
        --output=*)
            OUTPUT_DIR="${1#*=}"
            shift
            ;;
        --help)
            echo "Usage: ./prepare-psbt-batch.sh [options]"
            echo ""
            echo "Options:"
            echo "  --no-dry-run             Actually create PSBTs (default is dry-run)"
            echo "  --count=N                Number of PSBTs to generate (default: 100)"
            echo "  --min=AMOUNT             Minimum OVT per transaction (default: 500)"
            echo "  --max=AMOUNT             Maximum OVT per transaction (default: 5000)"
            echo "  --lp=ADDRESS             LP wallet address"
            echo "  --rune=ID                Rune ID (default: OTORI)"
            echo "  --output=DIR             Output directory (default: ./psbt-transactions)"
            echo "  --help                   Show this help"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Verify LP address is provided
if [ "$LP_ADDRESS" = "<LP_WALLET_ADDRESS_HERE>" ]; then
    echo "ERROR: LP address not set. Use --lp=ADDRESS"
    exit 1
fi

# Create output directory if it doesn't exist
mkdir -p "$OUTPUT_DIR"

echo "=========================================================="
echo "OVT PSBT Batch Preparation"
echo "=========================================================="
echo "LP Address: $LP_ADDRESS"
echo "Rune ID: $OVT_RUNE_ID"
echo "Number of Transactions: $NUM_TRANSACTIONS"
echo "OVT Amount Range: $MIN_AMOUNT to $MAX_AMOUNT"
echo "Fee Rate: $FEE_RATE sat/vB"
echo "Output Directory: $OUTPUT_DIR"
echo "Mode: $([ "$DRY_RUN" = true ] && echo 'DRY RUN (no PSBTs will be created)' || echo 'LIVE (will create PSBTs)')"
echo ""

# Calculate total bitcoin needed for all transactions
# Each transaction needs at least 546 sats (dust limit) for the UTXO
TOTAL_BITCOIN_NEEDED=$(echo "$BITCOIN_AMOUNT * $NUM_TRANSACTIONS" | bc)
echo "Total testnet Bitcoin needed: $TOTAL_BITCOIN_NEEDED BTC (approximately)"
echo ""

# Function to generate a random amount within range
generate_random_amount() {
    echo $((RANDOM % (MAX_AMOUNT - MIN_AMOUNT + 1) + MIN_AMOUNT))
}

# Function to create a PSBT for a specific amount
create_psbt() {
    local amount=$1
    local recipient=$2
    local filename=$3
    
    # This is a simplified example. In reality, you'd need to:
    # 1. Create a proper PSBT using bitcoin-cli
    # 2. Send the exact OVT runes amount
    
    # Example command (you'll need to adapt this to your specific setup)
    local cmd="bitcoin-cli -signet -rpcwallet=lp walletcreatefundedpsbt [] [{\"$recipient\":$BITCOIN_AMOUNT, \"$OVT_RUNE_ID\":$amount}] 0 {\"fee_rate\":$FEE_RATE} true"
    
    if [ "$DRY_RUN" = true ]; then
        echo "Would execute: $cmd"
        echo "PSBT would be saved to: $filename"
        # For dry run, create a placeholder file
        echo "# DRY RUN - placeholder for PSBT" > "$filename"
        echo "# Command: $cmd" >> "$filename"
    else
        echo "Creating PSBT for $amount OVT to be sent to a future recipient..."
        
        # Execute the command and save the output
        # In a real implementation, you would actually run this command
        # For now, we'll just create a placeholder
        
        echo "# Placeholder for actual PSBT" > "$filename"
        echo "# This would be an actual PSBT generated by: $cmd" >> "$filename"
        echo "# Amount: $amount OVT" >> "$filename"
    fi
}

# Create placeholder customer addresses for demonstration
# In reality, these would be actual test customer addresses or dummy addresses
CUSTOMER_PREFIX="tb1qtest"

# Generate the PSBTs
for i in $(seq 1 $NUM_TRANSACTIONS); do
    # Generate a random amount for this transaction
    amount=$(generate_random_amount)
    
    # Create a placeholder recipient address (in reality would be actual addresses)
    padded_i=$(printf "%04d" $i)
    recipient="${CUSTOMER_PREFIX}${padded_i}"
    
    # Generate filename
    filename="${OUTPUT_DIR}/ovt_${amount}_${padded_i}.psbt"
    
    echo "Creating PSBT #$i: $amount OVT to $recipient"
    create_psbt "$amount" "$recipient" "$filename"
done

echo ""
echo "PSBT batch preparation completed."
echo "PSBTs saved to: $OUTPUT_DIR"
echo ""
echo "For production use, you would need to:"
echo "1. Fund the LP wallet with sufficient testnet Bitcoin (~$TOTAL_BITCOIN_NEEDED BTC)"
echo "2. Implement the actual PSBT creation using bitcoin-cli"
echo "3. Modify this script to use real recipient addresses or placeholders"
echo ""
echo "Script completed." 